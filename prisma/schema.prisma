generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  dateOfBirth   DateTime?
  plan          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Course        Course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageUrl    String?   @db.Text
  price       Float?
  cover       String    @default("https://pub-31ec4c4d831748f1969dfaa1b69a9cc1.r2.dev/7d217ea7-ff2d-428b-99a1-b1d7b2a157cf")
  isPublished Boolean   @default(false)
  tag         String?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters  Chapter[]
  author    User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  slug    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  position    Int
  isPublished Boolean  @default(false)
  lessons     Lesson[]
}

model Lesson {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  attachments Attachment[]

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video?

  @@index([chapterId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model Video {
  id                  String    @id @default(uuid())
  uploadBatchId       String?
  duration            Int
  sizeInBytes         Int
  storageKey          String?
  audioStorageKey     String?
  subtitlesStorageKey String?
  externalProviderId  String?   @unique
  processedAt         DateTime?
  commitUrl           String?
  createdAt           DateTime  @default(now())

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  uploadBatch   UploadBatch?   @relation(fields: [uploadBatchId], references: [id], onDelete: SetNull)
  transcription Transcription?
}

model Transcription {
  id         String    @id @default(uuid())
  videoId    String    @unique
  reviewedAt DateTime?
  createdAt  DateTime  @default(now())

  video    Video                  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  segments TranscriptionSegment[]
}

model TranscriptionSegment {
  id              String  @id @default(uuid())
  transcriptionId String
  start           Decimal @db.Decimal(10, 2)
  end             Decimal @db.Decimal(10, 2)
  text            String

  transcription Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)
}

model UploadBatch {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  videos Video[]
}
